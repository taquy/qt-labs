zipkin: 
  enabled: true

  nameOverride: ""
  fullnameOverride: ""
  configOverrides: {}

  ## @param secretConfigOverrides Overwrite or add extra configuration options to the chart default (these will be added in a secret)
  ## Example:
  ## secretConfigOverrides:
  ##   CASSANDRA_PASSWORD: test123
  ##
  secretConfigOverrides: {}

  ## @param existingConfigmap The name of an existing ConfigMap with your custom configuration for zipkin
  ## NOTE: By providing a ConfigMap, other settings provided using values may be ignored.
  ##
  existingConfigmap: ""

  ## @param existingSecret The name of an existing Secret with your custom sensitive configuration for zipkin
  ##
  existingSecret: ""

  ## @param javaOpts Set extra Java Options when launching zipkin
  ##
  javaOpts: ""

  ## Bitnami zipkin image
  ## ref: https://hub.docker.com/r/bitnami/zipkin/tags/
  ## @param image.registry [default: REGISTRY_NAME] zipkin image registry
  ## @param image.repository [default: REPOSITORY_NAME/zipkin] zipkin image repository
  ## @skip image.tag zipkin image tag (immutable tags are recommended)
  ## @param image.digest zipkin image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param image.pullPolicy zipkin image pull policy
  ## @param image.pullSecrets zipkin image pull secrets
  ## @param image.debug Enable zipkin image debug mode
  ##
  image:
    registry: docker.io
    repository: bitnami/zipkin
    tag: 3.4.3-debian-12-r0

  replicaCount: 1
  containerPorts:
    http: 9411
  usePasswordFile: true
  storageType: cassandra3
  ## TLS/SSL parameters
  ## @param tls.enabled Enable TLS
  ## @param tls.usePemCerts Use certificates in .pem format
  ## @param tls.existingSecret Name of a secret containing the certificate files
  ## @param tls.certFilename Filename inside the secret of the .crt file (when usePemCerts=true)
  ## @param tls.certKeyFilename Filename inside the secret of the .key file (when usePemCerts=true)
  ## @param tls.keystoreFilename Filename inside the secret of the .jks file (when usePemCerts=false)
  ## @param tls.password Password of the Java keystore
  ## @param tls.passwordSecret Name of a secret containing the password of the Java keystore
  ##
  tls:
    enabled: false
    usePemCerts: true
    existingSecret: ""
    certFilename: tls.crt
    certKeyFilename: tls.key
    keystoreFilename: zipkin.jks
    password: ""
    passwordSecret: ""
    ## @param tls.autoGenerated.enabled Enable automatic generation of certificates for TLS
    ## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
    autoGenerated:
      enabled: true
      engine: helm
      ## @param tls.autoGenerated.certManager.existingIssuer The name of an existing Issuer to use for generating the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.existingIssuerKind Existing Issuer kind, defaults to Issuer (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.keyAlgorithm Key algorithm for the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.keySize Key size for the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.duration Duration for the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.renewBefore Renewal period for the certificates (only for `cert-manager` engine)
      certManager:
        existingIssuer: ""
        existingIssuerKind: ""
        keySize: 2048
        keyAlgorithm: RSA
        duration: 2160h
        renewBefore: 360h
  resourcesPreset: "small"

  service:
    type: ClusterIP
    ports:
      http: 9411
    nodePorts:
      http: ""

  defaultInitContainers:
    waitForCassandra:
      enabled: false
    initCerts:
      ## @param defaultInitContainers.initCerts.enabled Enable init container that initializes the Java keystore with the TLS certificates (requires tls.enabled=true)
      ##
      enabled: true
      ## Init container's resource requests and limits
      ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param defaultInitContainers.initCerts.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param defaultInitContainers.initCerts.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
      ## Init container Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
      ## @param defaultInitContainers.initCerts.containerSecurityContext.enabled Enabled Init container' Security Context
      ## @param defaultInitContainers.initCerts.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in Init container
      ## @param defaultInitContainers.initCerts.containerSecurityContext.runAsUser Set runAsUser in Init container' Security Context
      ## @param defaultInitContainers.initCerts.containerSecurityContext.runAsGroup Set runAsGroup in Init container' Security Context
      ## @param defaultInitContainers.initCerts.containerSecurityContext.runAsNonRoot Set runAsNonRoot in Init container' Security Context
      ## @param defaultInitContainers.initCerts.containerSecurityContext.readOnlyRootFilesystem Set readOnlyRootFilesystem in Init container' Security Context
      ## @param defaultInitContainers.initCerts.containerSecurityContext.privileged Set privileged in Init container' Security Context
      ## @param defaultInitContainers.initCerts.containerSecurityContext.allowPrivilegeEscalation Set allowPrivilegeEscalation in Init container' Security Context
      ## @param defaultInitContainers.initCerts.containerSecurityContext.capabilities.drop List of capabilities to be dropped in Init container
      ## @param defaultInitContainers.initCerts.containerSecurityContext.seccompProfile.type Set seccomp profile in Init container
      ##
      containerSecurityContext:
        enabled: true
        seLinuxOptions: {}
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        readOnlyRootFilesystem: true
        privileged: false
        allowPrivilegeEscalation: false
        capabilities:
          drop: ["ALL"]
        seccompProfile:
          type: "RuntimeDefault"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

  ## @section Database parameters
  ##
  externalDatabase:
    ## @param externalDatabase.host External database host
    host: ""
    ## @param externalDatabase.port External database port
    port: 9042
    ## Database credentials
    ## @param externalDatabase.user Cassandra admin user
    ## @param externalDatabase.password Password for `dbUser.user`. Randomly generated if empty
    ##
    user: bn_zipkin
    password: ""
    ## @param externalDatabase.existingSecret Name of existing secret containing the database secret
    ##
    existingSecret: ""
    ## @param externalDatabase.existingSecretPasswordKey Name of existing secret key containing the database password secret key
    ##
    existingSecretPasswordKey: ""
    ## Cluster parameters
    ## @param externalDatabase.cluster.datacenter Name for cassandra's zipkin datacenter
    ##
    cluster:
      datacenter: "datacenter1"
    ## @param externalDatabase.keyspace Name for cassandra's zipkin keyspace
    ##
    keyspace: "bitnami_zipkin"
  ## @section Cassandra storage sub-chart
  ##
  cassandra:
    ## @param cassandra.enabled Enables cassandra storage pod
    ##
    enabled: false
    ## Cluster parameters
    ## @param cassandra.cluster.datacenter Name for cassandra's zipkin datacenter
    ##
    cluster:
      datacenter: "datacenter1"
    ## @param cassandra.keyspace Name for cassandra's zipkin keyspace
    ##
    keyspace: "bitnami_zipkin"
    ## Database credentials
    ## @param cassandra.dbUser.user Cassandra admin user
    ## @param cassandra.dbUser.password Password for `dbUser.user`. Randomly generated if empty
    ## @param cassandra.dbUser.existingSecret Name of an existing secret containing the user password.
    ##
    dbUser:
      user: bn_zipkin
      password: ""
      existingSecret: ""
    ## Cassandra service port
    ## @param cassandra.service.ports.cql Cassandra cql port
    service:
      ports:
        cql: 9042
    ## Cassandra pods' resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## Minimum memory for development is 4GB and 2 CPU cores
    ## Minimum memory for production is 8GB and 4 CPU cores
    ## ref: http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architecturePlanningHardware_c.html
    ##
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param cassandra.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "medium"
    ## @param cassandra.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## @param cassandra.initDB [object] Init script for initializing the instance
    ##
    initDB:
      create_keyspace.cql: |
        CREATE KEYSPACE {{ include "zipkin.cassandra.keyspace" . }} WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
    ## @param cassandra.extraEnvVars [array] Add extra env variables to the Cassandra installation
    ## Note: Zipkin requires SASI indexes
    extraEnvVars:
      - name: CASSANDRA_CFG_YAML_SASI_INDEXES_ENABLED
        value: "true"
