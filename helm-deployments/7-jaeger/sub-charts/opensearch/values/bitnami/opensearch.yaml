opensearch:
  enabled: true
  global:
    defaultStorageClass: "longhorn-static"
    security:
      allowInsecureImages: true
  fullnameOverride: "jaeger-opensearch"
  namespaceOverride: ""
  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity
  clusterName: open
  containerPorts:
    restAPI: 9200
    transport: 9300
  useIstioLabels: false
  image:
    registry: docker.io
    repository: bitnami/opensearch
    tag: 2.18.0-debian-12-r2
    debug: false
  security:
    enabled: false
    adminPassword: ""
    logstashPassword: ""
    existingSecret: ""
    fipsMode: false
    tls:
      admin:
        existingSecret: ""
        certKey: ""
        keyKey: ""
      ## @param security.tls.restEncryption Enable SSL/TLS encryption for OpenSearch REST API.
      ##
      restEncryption: false
      ## @param security.tls.autoGenerated Create self-signed TLS certificates.
      ## NOTE: If autoGenerated certs are enabled and a new node type is enabled using helm upgrade, make sure you remove previously existing OpenSearch TLS secrets.
      ## Otherwise, the new node certs won't match the existing certs.
      ##
      autoGenerated: true
      ## @param security.tls.verificationMode Verification mode for SSL communications.
      ## Supported values: full, certificate, none.
      ## Ref: https://www.open.co/guide/en/opensearch/reference/current/security-settings.html
      ##
      verificationMode: "full"
      ## TLS configuration for master nodes
      ##
      master:
        ## @param security.tls.master.existingSecret Existing secret containing the certificates for the master nodes
        ## @param security.tls.master.certKey Key containing the crt for master nodes certificate (defaults to tls.crt)
        ## @param security.tls.master.keyKey Key containing the key for master nodes certificate (defaults to tls.key)
        ## @param security.tls.master.caKey Key containing the ca for master nodes certificate (defaults to ca.crt)
        ##
        existingSecret: ""
        certKey: ""
        keyKey: ""
        caKey: ""
      ## TLS configuration for data nodes
      ##
      data:
        ## @param security.tls.data.existingSecret Existing secret containing the certificates for the data nodes
        ## @param security.tls.data.certKey Key containing the crt for data nodes certificate (defaults to tls.crt)
        ## @param security.tls.data.keyKey Key containing the key for data nodes certificate (defaults to tls.key)
        ## @param security.tls.data.caKey Key containing the ca for data nodes certificate (defaults to ca.crt)
        ##
        existingSecret: ""
        certKey: ""
        keyKey: ""
        caKey: ""
      ## TLS configuration for ingest nodes
      ##
      ingest:
        ## @param security.tls.ingest.existingSecret Existing secret containing the certificates for the ingest nodes
        ## @param security.tls.ingest.certKey Key containing the crt for ingest nodes certificate (defaults to tls.crt)
        ## @param security.tls.ingest.keyKey Key containing the key for ingest nodes certificate (defaults to tls.key)
        ## @param security.tls.ingest.caKey Key containing the ca for ingest nodes certificate (defaults to ca.crt)
        ##
        existingSecret: ""
        certKey: ""
        keyKey: ""
        caKey: ""
      ## TLS configuration for coordinating nodes
      ##
      coordinating:
        ## @param security.tls.coordinating.existingSecret Existing secret containing the certificates for the coordinating nodes
        ## @param security.tls.coordinating.certKey Key containing the crt for coordinating nodes certificate (defaults to tls.crt)
        ## @param security.tls.coordinating.keyKey Key containing the key for coordinating nodes certificate (defaults to tls.key)
        ## @param security.tls.coordinating.caKey Key containing the ca for coordinating nodes certificate (defaults to ca.crt)
        ##
        existingSecret: ""
        certKey: ""
        keyKey: ""
        caKey: ""
      ## @param security.tls.keystoreFilename Name of the keystore file
      ##
      keystoreFilename: opensearch.keystore.jks
      ## @param security.tls.truststoreFilename Name of the truststore
      ##
      truststoreFilename: opensearch.truststore.jks
      ## @param security.tls.usePemCerts Use this variable if your secrets contain PEM certificates instead of JKS/PKCS12
      ## Ignored when using autoGenerated certs.
      ##
      usePemCerts: false
      ## @param security.tls.passwordsSecret Existing secret containing the Keystore and Truststore passwords, or key password if PEM certs are used
      ##
      passwordsSecret: ""
      ## @param security.tls.keystorePassword Password to access the JKS/PKCS12 keystore or PEM key when they are password-protected.
      ## Ignored if security.tls.passwordsSecret is provided.
      ##
      keystorePassword: ""
      ## @param security.tls.truststorePassword Password to access the JKS/PKCS12 truststore when they are password-protected.
      ## Ignored if security.tls.passwordsSecret is provided.
      ##
      truststorePassword: ""
      ## @param security.tls.keyPassword Password to access the PEM key when they are password-protected.
      ## Ignored if security.tls.passwordsSecret is provided.
      ##
      keyPassword: ""
      ## @param security.tls.secretKeystoreKey Name of the secret key containing the Keystore password
      ##
      secretKeystoreKey: ""
      ## @param security.tls.secretTruststoreKey Name of the secret key containing the Truststore password
      ##
      secretTruststoreKey: ""
      ## @param security.tls.secretKey Name of the secret key containing the PEM key password
      ##
      secretKey: ""
      ## @param security.tls.nodesDN A comma separated list of DN for nodes
      ## e.g. nodesDN: "O=Example CA,C=SE,UID=c-5ca04c9328c8208704310f7c2ed16414"
      ##
      ##
      nodesDN: ""
      ## @param security.tls.adminDN A comma separated list of DN for admins
      ##
      adminDN: ""

  service:
    type: ClusterIP
    ports:
      restAPI: 9200
      transport: 9300

  master:
    masterOnly: true
    replicaCount: 2
    persistence:
      enabled: false
      size: 8Gi

  data:
    replicaCount: 2
    persistence:
      enabled: false
      size: 8Gi

  coordinating:
    replicaCount: 2
    resourcesPreset: "small"
    
  ingest:
    enabled: true
    replicaCount: 2
    service:
      enabled: false
      type: ClusterIP
      ports:
        restAPI: 9200
        transport: 9300

  volumePermissions:
    enabled: false
  sysctlImage:
    enabled: false
    
  dashboards:
    enabled: true
    service:
      type: ClusterIP
    password: ""
    replicaCount: 1
    tls:
      enabled: false
      existingSecret: ""
      autoGenerated: true
    persistence:
      enabled: false
      size: 8Gi
  snapshots:
    enabled: false
    persistence:
      enabled: false
      size: 8Gi
    