---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: whoami
  labels:
    app: whoami
spec:
  replicas: 1
  selector:
    matchLabels:
      app: whoami
  template:
    metadata:
      labels:
        app: whoami
    spec:
      containers:
        - name: whoami
          image: traefik/whoami
          ports:
            - name: web
              containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: whoami
spec:
  ports:
    - name: web
      port: 80
      targetPort: web
  selector:
    app: whoami
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: whoami
spec:
  entryPoints:
    - web
  routes:
  - match: PathPrefix(`/whoami`)
    kind: Rule
    services:
    - name: whoami
      port: 80
# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: Middleware
# metadata:
#   name: headers-default
# spec:
#   headers:
#     browserXssFilter: true
#     contentTypeNosniff: true
#     forceSTSHeader: true
#     stsIncludeSubdomains: true
#     stsPreload: true
#     stsSeconds: 15552000
#     customFrameOptionsValue: SAMEORIGIN
# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: whoami
# spec:
#   entryPoints:
#     - websecure
#   routes:
#     - match: Host(`whoami.example.com`)
#       kind: Rule
#       middlewares:
#         - name: headers-default
#       services:
#         - name: whoami
#           port: 80
# apiVersion: traefik.io/v1alpha1
# kind: IngressRoute
# metadata:
#   name: traefik-dashboard
# spec:
#   routes:
#   - match: Host(`traefik.example.com`)
#     kind: Rule
#     services:
#     - name: api@internal
#       kind: TraefikService
#     middlewares:
#       - name: auth
# ---
# apiVersion: traefik.io/v1alpha1
# kind: Middleware
# metadata:
#   name: auth
# spec:
#   basicAuth:
#     secret: secretName # Kubernetes secret named "secretName"