opentelemetry-demo:
  enabled: false
  default:
    env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: "metadata.labels['app.kubernetes.io/component']"
      - name: OTEL_COLLECTOR_NAME
        value: '{{ include "otel-demo.name" . }}-otelcol'
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: 'service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version={{ .Chart.AppVersion }}'
    image:
      repository: ghcr.io/open-telemetry/demo
    replicas: 1
    revisionHistoryLimit: 10

  components:
    accountingService:
      enabled: true
      useDefault:
        env: true
      env:
        - name: KAFKA_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-kafka:9092'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
      resources:
        limits:
          memory: 120Mi
      initContainers:
        - name: wait-for-kafka
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-kafka 9092; do echo waiting for kafka; sleep 2; done;']

    adService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: AD_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: OTEL_LOGS_EXPORTER
          value: otlp
      resources:
        limits:
          memory: 300Mi

    cartService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: CART_SERVICE_PORT
          value: "8080"
        - name: ASPNETCORE_URLS
          value: http://*:$(CART_SERVICE_PORT)
        - name: VALKEY_ADDR
          value: '{{ include "otel-demo.name" . }}-valkey:6379'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 160Mi
      initContainers:
        - name: wait-for-valkey
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-valkey 6379; do echo waiting for valkey; sleep 2; done;']

    checkoutService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: CHECKOUT_SERVICE_PORT
          value: "8080"
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: CURRENCY_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
        - name: EMAIL_SERVICE_ADDR
          value: 'http://{{ include "otel-demo.name" . }}-emailservice:8080'
        - name: PAYMENT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-paymentservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: KAFKA_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-kafka:9092'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 20Mi
      initContainers:
        - name: wait-for-kafka
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-kafka 9092; do echo waiting for kafka; sleep 2; done;']

    currencyService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: CURRENCY_SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: VERSION
          value: "{{ .Chart.AppVersion }}"

    emailService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: EMAIL_SERVICE_PORT
          value: "8080"
        - name: APP_ENV
          value: production
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces

    frauddetectionService:
      enabled: true
      useDefault:
        env: true
      env:
        - name: KAFKA_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-kafka:9092'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
      resources:
        limits:
          memory: 300Mi
      initContainers:
        - name: wait-for-kafka
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-kafka 9092; do echo waiting for kafka; sleep 2; done;']

    frontend:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: FRONTEND_PORT
          value: "8080"
        - name: FRONTEND_ADDR
          value: :8080
        - name: AD_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-adservice:8080'
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: CHECKOUT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-checkoutservice:8080'
        - name: CURRENCY_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: RECOMMENDATION_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-recommendationservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: WEB_OTEL_SERVICE_NAME
          value: frontend-web
        - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: http://localhost:8080/otlp-http/v1/traces             # This expects users to use `kubectl port-forward ...`
      resources:
        limits:
          memory: 250Mi
      securityContext:
        runAsUser: 1001  # nextjs
        runAsGroup: 1001
        runAsNonRoot: true

    frontendProxy:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: ENVOY_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: FLAGD_UI_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_UI_PORT
          value: "4000"
        - name: FRONTEND_HOST
          value: '{{ include "otel-demo.name" . }}-frontend'
        - name: FRONTEND_PORT
          value: "8080"
        - name: GRAFANA_SERVICE_HOST
          value: '{{ include "otel-demo.name" . }}-grafana'
        - name: GRAFANA_SERVICE_PORT
          value: "80"
        - name: IMAGE_PROVIDER_HOST
          value: '{{ include "otel-demo.name" . }}-imageprovider'
        - name: IMAGE_PROVIDER_PORT
          value: "8081"
        - name: JAEGER_SERVICE_HOST
          value: '{{ include "otel-demo.name" . }}-jaeger-query'
        - name: JAEGER_SERVICE_PORT
          value: "16686"
        - name: LOCUST_WEB_HOST
          value: '{{ include "otel-demo.name" . }}-loadgenerator'
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_COLLECTOR_PORT_GRPC
          value: "4317"
        - name: OTEL_COLLECTOR_PORT_HTTP
          value: "4318"
      resources:
        limits:
          memory: 50Mi
      securityContext:
        runAsUser: 101  # envoy
        runAsGroup: 101
        runAsNonRoot: true

    imageprovider:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8081
      env:
        - name: IMAGE_PROVIDER_PORT
          value: "8081"
        - name: OTEL_COLLECTOR_PORT_GRPC
          value: "4317"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
      resources:
        limits:
          memory: 50Mi

    loadgenerator:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8089
      env:
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: LOCUST_USERS
          value: "10"
        - name: LOCUST_SPAWN_RATE
          value: "1"
        - name: LOCUST_HOST
          value: 'http://{{ include "otel-demo.name" . }}-frontendproxy:8080'
        - name: LOCUST_HEADLESS
          value: "false"
        - name: LOCUST_AUTOSTART
          value: "true"
        - name: LOCUST_BROWSER_TRAFFIC_ENABLED
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 1500Mi

    paymentService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: PAYMENT_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 120Mi
      securityContext:
        runAsUser: 1000  # node
        runAsGroup: 1000
        runAsNonRoot: true

    productCatalogService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: PRODUCT_CATALOG_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 20Mi

    quoteService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: QUOTE_SERVICE_PORT
          value: "8080"
        - name: OTEL_PHP_AUTOLOAD_ENABLED
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
      resources:
        limits:
          memory: 40Mi
      securityContext:
        runAsUser: 33  # www-data
        runAsGroup: 33
        runAsNonRoot: true

    recommendationService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: RECOMMENDATION_SERVICE_PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: OTEL_PYTHON_LOG_CORRELATION
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 500Mi            # This is high to enable supporting the recommendationCache feature flag use case

    shippingService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: SHIPPING_SERVICE_PORT
          value: "8080"
        - name: QUOTE_SERVICE_ADDR
          value: 'http://{{ include "otel-demo.name" . }}-quoteservice:8080'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 20Mi

    flagd:
      enabled: true
      imageOverride:
        repository: "ghcr.io/open-feature/flagd"
        tag: "v0.11.1"
      useDefault:
        env: true
      replicas: 1
      service:
        port: 8013
      env:
        - name: FLAGD_METRICS_EXPORTER
          value: otel
        - name: FLAGD_OTEL_COLLECTOR_URI
          value: $(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 75Mi
      command:
        - "/flagd-build"
        - "start"
        - "--uri"
        - "file:./etc/flagd/demo.flagd.json"
      mountedEmptyDirs:
        - name: config-rw
          mountPath: /etc/flagd
      # flgad-ui as a sidecar container in the same pod so the flag json file can be shared
      sidecarContainers:
        - name: flagdui
          useDefault:
            env: true
          service:
            port: 4000
          env:
            - name: FLAGD_METRICS_EXPORTER
              value: otel
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4318
          resources:
            limits:
              memory: 75Mi
          volumeMounts:
            - name: config-rw
              mountPath: /app/data
      initContainers:
        - name: init-config
          image: busybox
          command: ['sh', '-c', 'cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json']
          volumeMounts:
            - mountPath: /config-ro
              name: config-ro
            - mountPath: /config-rw
              name: config-rw
      additionalVolumes:
        - name: config-ro
          configMap:
            name: '{{ include "otel-demo.name" . }}-flagd-config'

    kafka:
      enabled: true
      useDefault:
        env: true
      replicas: 1
      ports:
        - name: plaintext
          value: 9092
        - name: controller
          value: 9093
      env:
        - name: KAFKA_ADVERTISED_LISTENERS
          value: 'PLAINTEXT://{{ include "otel-demo.name" . }}-kafka:9092'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx400M -Xms400M"
    valkey:
      enabled: true
      useDefault:
        env: true
      imageOverride:
        repository: "valkey/valkey"
        tag: "7.2-alpine"
      replicas: 1
      ports:
        - name: valkey
          value: 6379
  opentelemetry-collector:
    image:
      repository: "otel/opentelemetry-collector-contrib"
    enabled: true
    nameOverride: otelcol
    mode: deployment
    presets:
      kubernetesAttributes:
        enabled: true
    resources:
      limits:
        memory: 200Mi
    service:
      type: ClusterIP
    ports:
      metrics:
        enabled: true
      prometheus:
        enabled: true
        containerPort: 9464
        servicePort: 9464
        protocol: TCP
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9464"
      opentelemetry_community_demo: "true"
    config:
      receivers:
        otlp:
          protocols:
            http:
              cors:
                allowed_origins:
                  - "http://*"
                  - "https://*"
        httpcheck/frontendproxy:
          targets:
            - endpoint: 'http://{{ include "otel-demo.name" . }}-frontendproxy:8080'
        redis:
          endpoint: "valkey-cart:6379"
          collection_interval: 10s

      exporters:
        ## Create an exporter to Jaeger using the standard `otlp` export format
        otlp:
          endpoint: '{{ include "otel-demo.name" . }}-jaeger-collector:4317'
          tls:
            insecure: true
        # Create an exporter to Prometheus (metrics)
        # otlphttp/prometheus:
        #   endpoint: 'http://{{ include "otel-demo.name" . }}-prometheus-server:9090/api/v1/otlp'
        #   tls:
        #     insecure: true
        # opensearch:
        #   logs_index: otel
        #   http:
        #     endpoint: "http://otel-demo-opensearch:9200"
        #     tls:
        #       insecure: true

      processors:
        transform:
          error_mode: ignore
          trace_statements:
            - context: span
              statements:
                # could be removed when https://github.com/vercel/next.js/pull/64852 is fixed upstream
                - replace_pattern(name, "\\?.*", "")
                - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
        resource:
          attributes:
          - key: service.instance.id
            from_attribute: k8s.pod.uid
            action: insert

      connectors:
        spanmetrics: {}

      service:
        pipelines:
          traces:
            processors: [memory_limiter, resource, transform, batch]
            exporters: [otlp, debug, spanmetrics]
          metrics:
            receivers: [httpcheck/frontendproxy, redis, otlp, spanmetrics]
            processors: [memory_limiter, resource, batch]
            exporters: [otlphttp/prometheus, debug]
          logs:
            processors: [memory_limiter, resource, batch]
            exporters: [opensearch, debug]

  jaeger:
    enabled: false
    provisionDataStore:
      cassandra: false
    allInOne:
      enabled: true
      args:
        - "--memory.max-traces=5000"
        - "--query.base-path=/jaeger/ui"
        - "--prometheus.server-url=http://{{ include \"otel-demo.name\" . }}-prometheus-server:9090"
        - "--prometheus.query.normalize-calls=true"
        - "--prometheus.query.normalize-duration=true"
      extraEnv:
        - name: METRICS_STORAGE_TYPE
          value: prometheus
        - name: COLLECTOR_OTLP_GRPC_HOST_PORT
          value: 0.0.0.0:4317
        - name: COLLECTOR_OTLP_HTTP_HOST_PORT
          value: 0.0.0.0:4318
      resources:
        limits:
          memory: 400Mi
    storage:
      type: memory
    agent:
      enabled: false
    collector:
      enabled: false
    query:
      enabled: false

  prometheus:
    enabled: false
    alertmanager:
      enabled: false
    configmapReload:
      prometheus:
        enabled: false
    kube-state-metrics:
      enabled: false
    prometheus-node-exporter:
      enabled: false
    prometheus-pushgateway:
      enabled: false

    server:
      extraFlags:
        - "enable-feature=exemplar-storage"
        - "web.enable-otlp-receiver"
      global:
        scrape_interval: 5s
        scrape_timeout: 3s
        evaluation_interval: 30s
      tsdb:
        out_of_order_time_window: 30m
      prometheus.yml:
        otlp:
          keep_identifying_resource_attributes: true
          # Recommended attributes to be promoted to labels.
          promote_resource_attributes:
            - service.instance.id
            - service.name
            - service.namespace
            - cloud.availability_zone
            - cloud.region
            - container.name
            - deployment.environment.name
            - k8s.cluster.name
            - k8s.container.name
            - k8s.cronjob.name
            - k8s.daemonset.name
            - k8s.deployment.name
            - k8s.job.name
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.replicaset.name
            - k8s.statefulset.name
      persistentVolume:
        enabled: false
      service:
        servicePort: 9090
      resources:
        limits:
          memory: 300Mi

    serverFiles:
      prometheus.yml:
        scrape_configs:
          - job_name: 'otel-collector'
            honor_labels: true
            kubernetes_sd_configs:
              - role: pod
                namespaces:
                  own_namespace: true
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_opentelemetry_community_demo]
                action: keep
                regex: true

  grafana:
    enabled: false
    testFramework:
      enabled: false
    grafana.ini:
      auth:
        disable_login_form: true
      auth.anonymous:
        enabled: true
        org_name: Main Org.
        org_role: Admin
      server:
        root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
        serve_from_sub_path: true
    adminPassword: admin
    plugins:
      - grafana-opensearch-datasource
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            uid: webstore-metrics
            type: prometheus
            url: 'http://{{ include "otel-demo.name" . }}-prometheus-server:9090'
            editable: true
            isDefault: true
            jsonData:
              exemplarTraceIdDestinations:
                - datasourceUid: webstore-traces
                  name: trace_id

                - url: http://localhost:8080/jaeger/ui/trace/$${__value.raw}
                  name: trace_id
                  urlDisplayLabel: View in Jaeger UI

          - name: Jaeger
            uid: webstore-traces
            type: jaeger
            url: 'http://{{ include "otel-demo.name" . }}-jaeger-query:16686/jaeger/ui'
            editable: true
            isDefault: false

          - name: OpenSearch
            type: grafana-opensearch-datasource
            url: 'http://otel-demo-opensearch:9200/'
            access: proxy
            editable: true
            isDefault: false
            jsonData:
              database: otel
              flavor: opensearch
              logLevelField: severity
              logMessageField: body
              pplEnabled: true
              timeField: observedTimestamp
              version: 2.18.0
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
    dashboardsConfigMaps:
      default: '{{ include "otel-demo.name" . }}-grafana-dashboards'
    resources:
      limits:
        memory: 150Mi

  opensearch:
    enabled: false
