opentelemetry-demo:
  enabled: true
  # yaml-language-server: $schema=./values.schema.json
  default:
    # List of environment variables applied to all components
    env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: "metadata.labels['app.kubernetes.io/component']"
      - name: OTEL_COLLECTOR_NAME
        value: 'otel-colletor'
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: 'service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version={{ .Chart.AppVersion }}'
    # Allows overriding and additions to .Values.default.env
    envOverrides: []
    #  - name: OTEL_K8S_NODE_NAME
    #    value: "someConstantValue"
    image:
      repository: ghcr.io/open-telemetry/demo
      # Overrides the image tag whose default is the chart appVersion.
      # The service's name will be applied to the end of this value.
      tag: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    # Default # of replicas for all components
    replicas: 1
    # default revisionHistoryLimit for all components (number of old ReplicaSets to retain)
    revisionHistoryLimit: 10
    # Default schedulingRules for all components
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []
    # Default securityContext for all components
    securityContext: {}

  components:
    ## Demo Components are named objects (services) with several properties
    # demoService:
    ## Enable the component (service)
    #   enabled: true
    #   useDefault:
    ## Use default environment variables
    #     env: true
    ## Override Image repository and Tag. Tag will use appVersion as default.
    ## Component's name will be applied to end of this value.
    #   imageOverride: {}
    ## Optional service definitions to apply
    #   service:
    ## Service Type to use for this component. Default is ClusterIP.
    #     type: ClusterIP
    ## Service Port to use to expose this component. Default is nil
    #     port: 8080
    ## Service Node Port to use to expose this component on a NodePort service. Default is nil
    #     nodePort: 30080
    ## Service Annotations to add to this component
    #     annotations: {}
    ## Additional service ports to use to expose this component
    #   ports:
    #     - name: extraServicePort
    #       value: 8081
    ## Environment variables to add to the component's pod
    #   env:
    ## Environment variables that upsert (append + merge) into the `env` specification for this component.
    ## A variable named OTEL_RESOURCE_ATTRIBUTES_EXTRA will have its value appended to the OTEL_RESOURCE_ATTRIBUTES value.
    #   envOverrides:
    ## Pod Scheduling rules for nodeSelector, affinity, or tolerations.
    #   schedulingRules:
    #     nodeSelector: {}
    #     affinity: {}
    #     tolerations: []
    ## Pod Annotations to add to this component
    #   podAnnotations: {}
    ## Resources for this component
    #   resources: {}
    ## Container security context for setting user ID (UID), group ID (GID) and other security policies
    #   securityContext:
    ## Ingresses rules to add for the to the component
    # ingress:
    ## Enable the creation of Ingress rules. Default is false
    #   enabled: false
    ## Annotations to add to the ingress rule
    #   annotations: {}
    ## Which Ingress class (controller) to use. Default is unspecified.
    #   ingressClassName: nginx
    ## Hosts definitions for the Ingress rule
    #   hosts:
    #     - host: demo.example.com
    ## Each host can have multiple paths/routes
    #       paths:
    #         - path: /
    #           pathType: Prefix
    #           port: 8080
    ## Optional TLS specifications for the Ingress rule
    #   tls:
    #     - secretName: demo-tls
    #       hosts:
    #         - demo.example.com
    ## Additional ingresses - only created if ingress.enabled is true
    ## Useful for when differently annotated ingress services are required
    ## Each additional ingress needs key "name" set to something unique
    #   additionalIngresses: []
    #     - name: extra-demo-ingress
    #       ingressClassName: nginx
    #       annotations: {}
    #       hosts:
    #         - host: demo.example.com
    #           paths:
    #             - path: /
    #               pathType: Prefix
    #               port: 8080
    #       tls:
    #         - secretName: demo-tls
    #           hosts:
    #             - demo.example.com
    ## Command to use in the container spec, in case you don't want to go with the default command from the image.
    #   command: []
    ## Configuration to for this component; will create a Volume, and Mount backed by an optionally created ConfigMap.
    ## The name, mountPath are required, and one of existingConfigMap or data is required.
    ## If an existing ConfigMap is not provided, the contents under data will be used for the created ConfigMap.
    #   mountedConfigMaps: []
    #     - name: my-config
    #       mountPath: /etc/config
    #       subPath:
    #       existingConfigMap: my-configmap
    #       data:
    #         my-config.yaml: |
    #           key: value
    # # Kubernetes container health check options
    #   livenessProbe: {}
    # # Optional init container to run before the pod starts.
    #   initContainers:
    #     - name: <init-container-name>
    #       image: <init-container-image>
    #       command: [list of commands for the init container to run]
    # # Replicas for the component
    #  replicas: 1
    # # Number of old ReplicaSets to retain
    #  revisionHistoryLimit: 10
    # # Optional pod security context for setting user ID (UID), group ID (GID) and other security policies
    # # This will be applied at pod level, can be applied globally for all pods: .Values.default.podSecurityContext
    # # Or it can be applied to a specific component: .Values.components.<component-name>.podSecurityContext
    #    podSecurityContext:
    #      runAsGroup: 65534
    #      runAsNonRoot: true
    #      runAsUser: 65534

    accountingService:
      enabled: true
      useDefault:
        env: true
      env:
        - name: KAFKA_SERVICE_ADDR
          value: 'deps-kafka:9092'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
      resources:
        limits:
          memory: 120Mi
      initContainers:
        - name: wait-for-kafka
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 deps-kafka 9092; do echo waiting for kafka; sleep 2; done;']

    adService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: AD_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: OTEL_LOGS_EXPORTER
          value: otlp
      resources:
        limits:
          memory: 300Mi

    cartService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: CART_SERVICE_PORT
          value: "8080"
        - name: ASPNETCORE_URLS
          value: http://*:$(CART_SERVICE_PORT)
        - name: VALKEY_ADDR
          value: 'valkey-primary:6379'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 160Mi
      initContainers:
        - name: wait-for-valkey
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 valkey-primary 6379; do echo waiting for valkey; sleep 2; done;']

    checkoutService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: CHECKOUT_SERVICE_PORT
          value: "8080"
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: CURRENCY_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
        - name: EMAIL_SERVICE_ADDR
          value: 'http://{{ include "otel-demo.name" . }}-emailservice:8080'
        - name: PAYMENT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-paymentservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: KAFKA_SERVICE_ADDR
          value: 'deps-kafka:9092'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 20Mi
      initContainers:
        - name: wait-for-kafka
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 deps-kafka 9092; do echo waiting for kafka; sleep 2; done;']

    currencyService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: CURRENCY_SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: VERSION
          value: "{{ .Chart.AppVersion }}"
      resources:
        limits:
          memory: 20Mi

    emailService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: EMAIL_SERVICE_PORT
          value: "8080"
        - name: APP_ENV
          value: production
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
      resources:
        limits:
          memory: 100Mi

    frauddetectionService:
      enabled: true
      useDefault:
        env: true
      env:
        - name: KAFKA_SERVICE_ADDR
          value: 'deps-kafka:9092'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
      resources:
        limits:
          memory: 300Mi
      initContainers:
        - name: wait-for-kafka
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z -v -w30 deps-kafka 9092; do echo waiting for kafka; sleep 2; done;']

    frontend:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: FRONTEND_PORT
          value: "8080"
        - name: FRONTEND_ADDR
          value: :8080
        - name: AD_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-adservice:8080'
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: CHECKOUT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-checkoutservice:8080'
        - name: CURRENCY_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: RECOMMENDATION_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-recommendationservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: WEB_OTEL_SERVICE_NAME
          value: frontend-web
        - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: http://localhost:8080/otlp-http/v1/traces             # This expects users to use `kubectl port-forward ...`

    frontendProxy:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: ENVOY_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: FLAGD_UI_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_UI_PORT
          value: "4000"
        - name: FRONTEND_HOST
          value: '{{ include "otel-demo.name" . }}-frontend'
        - name: FRONTEND_PORT
          value: "8080"
        - name: GRAFANA_SERVICE_HOST
          value: 'otel-demo-grafana'
        - name: GRAFANA_SERVICE_PORT
          value: "80"
        - name: IMAGE_PROVIDER_HOST
          value: '{{ include "otel-demo.name" . }}-imageprovider'
        - name: IMAGE_PROVIDER_PORT
          value: "8081"
        - name: JAEGER_SERVICE_HOST
          value: 'jaeger-query'
        - name: JAEGER_SERVICE_PORT
          value: "16686"
        - name: LOCUST_WEB_HOST
          value: '{{ include "otel-demo.name" . }}-loadgenerator'
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_COLLECTOR_PORT_GRPC
          value: "4317"
        - name: OTEL_COLLECTOR_PORT_HTTP
          value: "4318"
  
    imageprovider:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8081
      env:
        - name: IMAGE_PROVIDER_PORT
          value: "8081"
        - name: OTEL_COLLECTOR_PORT_GRPC
          value: "4317"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
    
    loadgenerator:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8089
      env:
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: LOCUST_USERS
          value: "10"
        - name: LOCUST_SPAWN_RATE
          value: "1"
        - name: LOCUST_HOST
          value: 'http://{{ include "otel-demo.name" . }}-frontendproxy:8080'
        - name: LOCUST_HEADLESS
          value: "false"
        - name: LOCUST_AUTOSTART
          value: "true"
        - name: LOCUST_BROWSER_TRAFFIC_ENABLED
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
 
    paymentService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: PAYMENT_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
 
    productCatalogService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: PRODUCT_CATALOG_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
 
    quoteService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: QUOTE_SERVICE_PORT
          value: "8080"
        - name: OTEL_PHP_AUTOLOAD_ENABLED
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
      resources:
        limits:
          memory: 40Mi
      securityContext:
        runAsUser: 33  # www-data
        runAsGroup: 33
        runAsNonRoot: true

    recommendationService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: RECOMMENDATION_SERVICE_PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: OTEL_PYTHON_LOG_CORRELATION
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: FLAGD_HOST
          value: '{{ include "otel-demo.name" . }}-flagd'
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317

    shippingService:
      enabled: true
      useDefault:
        env: true
      service:
        port: 8080
      env:
        - name: SHIPPING_SERVICE_PORT
          value: "8080"
        - name: QUOTE_SERVICE_ADDR
          value: 'http://{{ include "otel-demo.name" . }}-quoteservice:8080'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317

    flagd:
      enabled: true
      imageOverride:
        repository: "ghcr.io/open-feature/flagd"
        tag: "v0.11.1"
      useDefault:
        env: true
      replicas: 1
      service:
        port: 8013
      env:
        - name: FLAGD_METRICS_EXPORTER
          value: otel
        - name: FLAGD_OTEL_COLLECTOR_URI
          value: $(OTEL_COLLECTOR_NAME):4317
      resources:
        limits:
          memory: 75Mi
      command:
        - "/flagd-build"
        - "start"
        - "--uri"
        - "file:./etc/flagd/demo.flagd.json"
      mountedEmptyDirs:
        - name: config-rw
          mountPath: /etc/flagd
      # flgad-ui as a sidecar container in the same pod so the flag json file can be shared
      sidecarContainers:
        - name: flagdui
          useDefault:
            env: true
          service:
            port: 4000
          env:
            - name: FLAGD_METRICS_EXPORTER
              value: otel
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4318
          resources:
            limits:
              memory: 75Mi
          volumeMounts:
            - name: config-rw
              mountPath: /app/data
      initContainers:
        - name: init-config
          image: busybox
          command: ['sh', '-c', 'cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json']
          volumeMounts:
            - mountPath: /config-ro
              name: config-ro
            - mountPath: /config-rw
              name: config-rw
      additionalVolumes:
        - name: config-ro
          configMap:
            name: '{{ include "otel-demo.name" . }}-flagd-config'

    kafka:
      enabled: false

    valkey:
      enabled: false

  opentelemetry-collector:
    enabled: false
  jaeger:
    enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false
  opensearch:
    enabled: false
   