opentelemetry-operator:
  enabled: true
  replicaCount: 1
  fullnameOverride: ""
  manager:
    image:
      repository: ghcr.io/open-telemetry/opentelemetry-operator/opentelemetry-operator
      tag: ""
    collectorImage:
      repository: "otel/opentelemetry-collector-k8s"
      tag: 0.114.0
    opampBridgeImage:
      repository: ""
      tag: ""
    targetAllocatorImage:
      repository: ""
      tag: ""
    autoInstrumentationImage:
      java:
        repository: ""
        tag: ""
      nodejs:
        repository: ""
        tag: ""
      python:
        repository: ""
        tag: ""
      dotnet:
        repository: ""
        tag: ""
      apacheHttpd:
        repository: ""
        tag: ""
      # The Go instrumentation support in the operator is disabled by default.
      # To enable it, use the operator.autoinstrumentation.go feature gate.
      go:
        repository: ""
        tag: ""
    ports:
      metricsPort: 8080
      webhookPort: 9443
      healthzPort: 8081
    env:
      ENABLE_WEBHOOKS: "true"
    serviceAccount:
      create: true
      name: ""

    # Whether the operator should create RBAC permissions for collectors. See README.md for more information.
    createRbacPermissions: false
    leaderElection:
      enabled: true
  admissionWebhooks:
    create: true
    servicePort: 443
    failurePolicy: Fail
    secretName: ""
    namePrefix: ""
    timeoutSeconds: 10
    certManager:
      enabled: true
      ## Provide the issuer kind and name to do the cert auth job.
      ## By default, OpenTelemetry Operator will use self-signer issuer.
      issuerRef: {}
      # kind:
      # name:
      ## Annotations for the cert and issuer if cert-manager is enabled.
      certificateAnnotations: {}
      issuerAnnotations: {}
      # duration must be specified by a Go time.Duration (ending in s, m or h)
      duration: ""
      # renewBefore must be specified by a Go time.Duration (ending in s, m or h)
      # Take care when setting the renewBefore field to be very close to the duration
      # as this can lead to a renewal loop, where the Certificate is always in the renewal period.
      renewBefore: ""

    autoGenerateCert:
      enabled: true
      # If set to true, new webhook key/certificate is generated on helm upgrade.
      recreate: true
      # Cert period time in days. The default is 365 days.
      certPeriodDays: 365
    certFile: ""
    ## Path to your own PEM-encoded private key.
    keyFile: ""
    ## Path to the CA cert.
    caFile: ""
  crds:
    create: true
