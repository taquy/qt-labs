memcached:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
    username: ""
    password: ""
    ## @param auth.existingPasswordSecret Existing secret with Memcached credentials (must contain a value for `memcached-password` key)
    existingPasswordSecret: ""
  replicaCount: 1
  resourcesPreset: "nano"
  persistence:
    enabled: false

    ## @param metrics.enabled Start a side-car prometheus exporter
    ##
    enabled: false
    ## Bitnami Memcached Prometheus Exporter image
    ## ref: https://hub.docker.com/r/bitnami/memcached-exporter/tags/
    ## @param metrics.image.registry [default: REGISTRY_NAME] Memcached exporter image registry
    ## @param metrics.image.repository [default: REPOSITORY_NAME/memcached-exporter] Memcached exporter image repository
    ## @skip metrics.image.tag Memcached exporter image tag (immutable tags are recommended)
    ## @param metrics.image.digest Memcached exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param metrics.image.pullPolicy Image pull policy
    ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/memcached-exporter
      tag: 0.15.0-debian-12-r3
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param metrics.containerPorts.metrics Memcached Prometheus Exporter container port
    ##
    containerPorts:
      metrics: 9150
    ## Memcached Prometheus exporter container resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param metrics.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if metrics.resources is set (metrics.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}