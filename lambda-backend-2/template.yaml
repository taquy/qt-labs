AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Idea Management Application with Lambda, DynamoDB, Cognito, and API Gateway

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name that will be prefixed to resource names

Resources:
  # S3 Bucket for CloudFormation state
  CloudFormationStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-idea-management-state
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB Table for Ideas
  IdeasTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${EnvironmentName}-ideas
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${EnvironmentName}-idea-management-users
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: 1
            MaxLength: 256
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: 1
            MaxLength: 256

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${EnvironmentName}-idea-management-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED

  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref EnvironmentName
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            UserPoolClientId: !Ref UserPoolClient
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      EndpointConfiguration: REGIONAL
      BinaryMediaTypes:
        - '*/*'
      OpenApiVersion: '3.0.1'
      DefinitionBody:
        openapi: 3.0.1
        components:
          schemas:
            RegisterUserRequest:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                name:
                  type: string
                  minLength: 1
            LoginUserRequest:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
        paths:
          /auth/register:
            post:
              summary: Register a new user
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/RegisterUserRequest'
              responses:
                '200':
                  description: User registered successfully
                '400':
                  description: Invalid request
                '409':
                  description: User already exists
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /auth/login:
            post:
              summary: Login user
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/LoginUserRequest'
              responses:
                '200':
                  description: Login successful
                '400':
                  description: Invalid request
                '401':
                  description: Invalid credentials
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginUserFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /ideas:
            post:
              summary: Create a new idea
              responses:
                '200':
                  description: Idea created successfully
                '400':
                  description: Invalid request
                '401':
                  description: Unauthorized
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateIdeaFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /ideas/{id}:
            get:
              summary: Get an idea by ID
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Idea retrieved successfully
                '404':
                  description: Idea not found
                '401':
                  description: Unauthorized
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIdeaFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            put:
              summary: Update an idea
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Idea updated successfully
                '404':
                  description: Idea not found
                '401':
                  description: Unauthorized
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateIdeaFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            delete:
              summary: Delete an idea
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Idea deleted successfully
                '404':
                  description: Idea not found
                '401':
                  description: Unauthorized
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteIdeaFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

  # Lambda Functions
  CreateIdeaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: createIdea.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          IDEAS_TABLE: !Ref IdeasTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IdeasTable
      Events:
        CreateIdea:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Path: /ideas
            Method: POST

  GetIdeaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: getIdea.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          IDEAS_TABLE: !Ref IdeasTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IdeasTable
      Events:
        GetIdea:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Path: /ideas/{id}
            Method: GET

  UpdateIdeaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: updateIdea.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          IDEAS_TABLE: !Ref IdeasTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IdeasTable
      Events:
        UpdateIdea:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Path: /ideas/{id}
            Method: PUT

  DeleteIdeaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: deleteIdea.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          IDEAS_TABLE: !Ref IdeasTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IdeasTable
      Events:
        DeleteIdea:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Path: /ideas/{id}
            Method: DELETE

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: registerUser.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
                - cognito-idp:ConfirmSignUp
                - cognito-idp:AdminConfirmSignUp
                - cognito-idp:AdminSetUserPassword
              Resource: !GetAtt UserPool.Arn
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Path: /auth/register
            Method: POST
            Auth:
              Authorizer: NONE

  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: loginUser.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
                - cognito-idp:RespondToAuthChallenge
              Resource: !GetAtt UserPool.Arn
      Events:
        LoginUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Path: /auth/login
            Method: POST
            Auth:
              Authorizer: NONE

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}"
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  CloudFormationStateBucket:
    Description: S3 Bucket for CloudFormation state
    Value: !Ref CloudFormationStateBucket 