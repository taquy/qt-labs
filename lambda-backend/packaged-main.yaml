AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation template for Idea Management System with Cognito, DynamoDB,
  and Lambda
Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket containing the nested stack template
  ApiStageName:
    Type: String
    Default: dev
    Description: API Gateway stage name
  UserPoolName:
    Type: String
    Default: IdeaUserPool
    Description: Name of the Cognito User Pool
Resources:
  IdeaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Ideas
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: UserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: email
        AttributeDataType: String
        Required: true
        Mutable: true
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      ClientName: IdeaAppClient
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
              Fn::GetAtt:
              - IdeaTable
              - Arn
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://608495931393-ap-1742895301/6029fe271265c3decee7446d7722ea20
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CognitoUserPool
          CLIENT_ID:
            Ref: UserPoolClient
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Timeout: 30
      MemorySize: 128
  ApiGatewayStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - CognitoUserPool
    - UserPoolClient
    - RegisterFunction
    Properties:
      TemplateURL:
        Fn::Sub: https://${S3BucketName}.s3.${AWS::Region}.amazonaws.com/packaged-api.yaml
      Parameters:
        UserPoolId:
          Ref: CognitoUserPool
        UserPoolClientId:
          Ref: UserPoolClient
        StageName:
          Ref: ApiStageName
        RegisterFunctionArn:
          Fn::GetAtt:
          - RegisterFunction
          - Arn
Outputs:
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value:
      Ref: CognitoUserPool
  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value:
      Ref: UserPoolClient
  IdeaTableName:
    Description: Name of the DynamoDB table
    Value:
      Ref: IdeaTable
