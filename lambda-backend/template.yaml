AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Idea Management System with Cognito, DynamoDB, and Lambda'

Parameters:
  UserPoolName:
    Type: String
    Default: IdeaUserPool
    Description: Name for the Cognito User Pool

Resources:
  # DynamoDB Table
  IdeaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Ideas
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ideaId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: ideaId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: idea-app-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                Resource: !GetAtt IdeaTable.Arn

  # Updated Lambda Functions
  CreateIdeaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateIdea
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/createIdea.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  GetIdeaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetIdea
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/getIdea.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  UpdateIdeaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateIdea
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/updateIdea.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  DeleteIdeaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteIdea
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/deleteIdea.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

Outputs:
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient
  IdeaTableName:
    Description: Name of the DynamoDB table
    Value: !Ref IdeaTable
